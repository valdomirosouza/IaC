#!/bin/bash

## --------------------------------------
## Atualizacao de pacotes
## --------------------------------------

sudo yum update -y

## --------------------------------------
# Proteger SSH
## --------------------------------------
echo "Protegendo o acesso SSH..."
sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/g' /etc/ssh/sshd_config
sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config
systemctl restart sshd

## --------------------------------------
# Aplicar configurações de segurança do kernel
## --------------------------------------
echo "Aplicando configurações do kernel..."
echo "net.ipv4.conf.all.rp_filter = 1" | sudo tee -a /etc/sysctl.conf
echo "net.ipv4.ip_forward = 0" | sudo tee -a /etc/sysctl.conf
sudo sysctl -p

## --------------------------------------
## Hardening
## --------------------------------------

set -euxo pipefail

# ===================== Parâmetros =====================
# 0 = apenas lista candidatos (DRY-RUN). 1 = remove de verdade.
ENABLE_PURGE="${ENABLE_PURGE:-0}"
# 1 = remove toolchains/compiladores e bloqueia re-instalação via versionlock.
ALSO_REMOVE_COMPILERS="${ALSO_REMOVE_COMPILERS:-1}"

mkdir -p /root/hardening
LOG="/root/hardening/purge.log"
echo "$(date -Is) - Hardening start (ENABLE_PURGE=$ENABLE_PURGE)" | tee -a "$LOG"

# ===================== Sanity: distro =====================
. /etc/os-release || true
if [ "${ID:-unknown}" != "amzn" ]; then
  echo "Esta rotina é específica para Amazon Linux 2023 (ID=amzn). Detectado ID=${ID:-unknown}. Abortando." | tee -a "$LOG"
  exit 1
fi

# ===================== Allowlist =====================
# Essenciais comuns e utilitários de troubleshooting
ALLOWLIST_COMMON=(
  bash coreutils findutils grep gawk sed tar gzip bzip2 xz diffutils less which
  procps-ng util-linux shadow-utils passwd sudo yum
  iproute iputils curl ca-certificates openssl
  bash-completion bind-libs bind-license bind-utils binutils
  chkconfig crontabs dnf-plugin-release-notification dnf-plugin-support-info dnf-utils 
)

# Pacotes vitais e de operação para AL2023
ALLOWLIST_AMAZON2023=(
  # Kernel e libs fundamentais
  kernel kernel-core kernel-modules glibc libgcc libstdc++ filesystem setup tzdata

  # Amazon Linux
  amazon-chrony-config amazon-ec2-net-utils amazon-linux-sb-keys amazon-rpm-config

  # AWS
  aws-cfn-bootstrap awscli-2 ec2-hibinit-agent ec2-instance-connect ec2-instance-connect-selinux 

  # SELinux (AL2023 vem com SELinux enforcing por padrão)
  libselinux policycoreutils selinux-policy selinux-policy-targeted

  # Init/serviços
  systemd systemd-libs systemd-udev systemd-pam dbus dbus-libs

  # Gerenciador de pacotes e deps
  dnf dnf-plugins-core rpm rpm-libs libsolv librepo libdnf python3 python3-dnf

  # Provisionamento/gestão AWS
  openssh openssh-server openssh-clients cloud-init ec2-utils amazon-ssm-agent

  # Rede (padrão no AL2023)
  NetworkManager systemd-networkd 

  # Sincronismo de tempo
  chrony

  # Editores mínimos
  vim-minimal nano
)

# Proteções extras, mesmo que alterem a allowlist sem querer
PROTECT=( kernel kernel-core kernel-modules glibc systemd dnf rpm cloud-init openssh-server filesystem setup selinux-policy selinux-policy-targeted )

# Compiladores e toolchains (remoção opcional)
COMPILER_PATTERNS='^(gcc|gcc-c\\+\\+|g\\+\\+|clang|llvm|make|cmake|ninja|pkgconf|pkgconfig|autoconf|automake|libtool|binutils|patch|go|golang|rust|cargo|kernel-headers|glibc-headers)$'

# ===================== Inventário =====================
rpm -qa --qf '%{NAME}\n' | sort -u > /root/hardening/_installed.txt

# Base do "keep"
printf "%s\n" "${ALLOWLIST_COMMON[@]}" "${ALLOWLIST_AMAZON2023[@]}" "${PROTECT[@]}" \
  | sort -u > /root/hardening/_keep_base.txt

# Garantir plugin do dnf para repoquery
if ! command -v repoquery >/dev/null 2>&1; then
  dnf install -y dnf-plugins-core || true
fi

# ===================== Fechamento de dependências =====================
# Mantemos também TODAS as dependências recursivas dos pacotes permitidos,
# evitando que o dnf remova algo necessário para o boot/SSH/dnf.
: > /root/hardening/_keep_closure.txt
while read -r PKG; do
  # Só calcula deps se o pacote estiver instalado
  if rpm -q "$PKG" >/dev/null 2>&1; then
    echo "$PKG" >> /root/hardening/_keep_closure.txt
    # Dependências recursivas resolvidas
    repoquery --installed --qf '%{name}' --resolve --recursive --requires "$PKG" 2>/dev/null \
      || true
  fi
done < /root/hardening/_keep_base.txt >> /root/hardening/_keep_closure.txt

# Normaliza lista final de "keep"
sort -u /root/hardening/_keep_closure.txt > /root/hardening/_keep.txt

# ===================== Candidatos à remoção =====================
# Tudo que está instalado menos o que é "keep"
comm -23 /root/hardening/_installed.txt /root/hardening/_keep.txt > /root/hardening/_candidates_base.txt

# Força inclusão de toolchains/compiladores (se habilitado)
: > /root/hardening/_candidates_compilers.txt
if [ "$ALSO_REMOVE_COMPILERS" = "1" ]; then
  grep -E "$COMPILER_PATTERNS" /root/hardening/_installed.txt || true >> /root/hardening/_candidates_compilers.txt
fi

# Junta candidatos e REMOVE o que porventura seja dependência dos mantidos
sort -u /root/hardening/_candidates_base.txt /root/hardening/_candidates_compilers.txt > /root/hardening/_candidates_all.txt
# Segurança extra: nunca proponha remover algo do keep
comm -23 /root/hardening/_candidates_all.txt /root/hardening/_keep.txt > /root/hardening/purge-candidates.txt

echo "Total instalados: $(wc -l < /root/hardening/_installed.txt)"        | tee -a "$LOG"
echo "Total keep (com deps): $(wc -l < /root/hardening/_keep.txt)"         | tee -a "$LOG"
echo "Total candidatos: $(wc -l < /root/hardening/purge-candidates.txt)"   | tee -a "$LOG"

# ===================== Execução =====================
if [ "$ENABLE_PURGE" != "1" ]; then
  echo "DRY-RUN concluído. Revise /root/hardening/purge-candidates.txt" | tee -a "$LOG"
else
  # Remoção efetiva
  xargs -a /root/hardening/purge-candidates.txt --no-run-if-empty dnf remove -y || true
  dnf autoremove -y || true
  dnf clean all -y || true
fi

# ===================== Hardening complementar =====================
# Desabilita e mascara serviços comumente desnecessários em servidores
if command -v systemctl >/dev/null 2>&1; then
  for SVC in avahi-daemon cups rpcbind postfix telnet.socket rsh.socket rlogin.socket bluetooth kdump firewalld; do
    systemctl disable --now "$SVC" 2>/dev/null || true
    systemctl mask "$SVC" 2>/dev/null || true
  done
fi

# Bloqueia re-instalação de toolchains via versionlock
if [ "$ALSO_REMOVE_COMPILERS" = "1" ]; then
  dnf -y install dnf-plugins-core || true
  dnf versionlock add 'gcc*' 'gcc-c++' 'g++' 'clang*' 'llvm*' 'make' 'cmake' 'ninja' \
                      'pkgconf*' 'autoconf' 'automake' 'libtool' 'binutils' 'patch' \
                      'go' 'golang*' 'rust*' 'cargo' 'kernel-headers' 'glibc-headers' || true
fi

# Umask mais restritiva (novo login)
echo 'umask 027' >/etc/profile.d/99-hardening-umask.sh

echo "$(date -Is) - Hardening done" | tee -a "$LOG"

